1、星露谷物语
分析血，游戏逻辑不在so里面。
确定游戏使用mono，mono提供运行时，游戏逻辑代码在c#代码里面
cheat功能实现，需要先分析mono的使用

###############################################################################################
从游戏脚本语言说起，剖析Mono所搭建的脚本基础:
https://segmentfault.com/a/1190000004071127

Mono的功能：
提供了一种将脚本语言通过JIT编译为原生代码的方式
提供了一个原生代码生成器，使你的应用的运行效率尽可能高。同时提供了很多方便的调用原生代码的接口。
编译器――mcs。在终端命令行使用mcs编译该cs文件，生成DLL文件



那些C/C++代码，我们通常称之为非托管代码，而通过CIL编译器生成CIL代码我们通常称之为托管代码(C#)。
所以，将Mono运行时嵌入我们的应用，可以分为三个步骤：
编译C++程序和链接Mono运行时
初始化Mono运行时
C/C++和C#/CIL的交互


MonoDomain，用来作为盛放托管代码的容器

将C#中的接口和C/C++中的具体实现关联起来。即通过Mono的mono_add_internal_call方法来实现，
也即在Mono的运行时中注册刚刚用C/C++实现的具体逻辑，以便将托管代码（C#）和非托管代码（C/C++）绑定
mono_add_internal_call("ManagedLibrary.Component::get_id_Internal", reinterpret_cast<void*>(ManagedLibrary_Component_get_id_Internal));

#########################################
源码结构
这里仅列举几个重要的目录：
mcs：
    mcs： Mono实现的基于Ecma标准的C#编译器。
    class： CLI的C#级的实现。类似于Android中的Java层，应用程序看到的是这一层提供的接口。这一层是平台无关的。
    ilasm： 反汇编器，将Native code反汇编成bytecode。
mono：
    mini： JIT编译器，将bytecode编译成native code。
    metadata： Mono的runtime，CLI的Native级的实现。
    io-layer： 与操作系统相关的接口实现，像socket，thread，mutex这些。


#################################
https://www.jianshu.com/p/edc258398153
采用Mono机制编译、处理C#语言编写的逻辑代码，编译之后本地存储IL指令。
在游戏运行阶段存在代码动态编译的过程，Mono jit机制将IL指令编译为机器可识别的汇编指令。


其中 mini_method_compile 函数在内部通过 Mono的 JIT 机制实现动态编译过程。




