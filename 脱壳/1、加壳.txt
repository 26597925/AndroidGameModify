精通Frida：逆向分析顶流框架,内存漫游到自动化利用一把梭
精通算法还原：定位Java/Native算法,调试加解密还原出源码
精通系统框架：依托安卓源码全部开源的优势降维打击分析App
精通art解释器：脱所有一二代壳,拳打Dex2C,手撕vmp,干翻Ollvm


APP加固技术原理和总结
安全开发开发过程中APP常规漏洞
资源/Java/Native代码混淆,反反编译器
反调试/签名校验,模拟多开/hook检测
业务场景加固,Dex加固一二三代壳,so加固

定制Fart脱壳机搞定一二代壳
(
定制DexFile的加载和执行流程脱所有一代壳
定制artMethod解释执行流程脱所有二代壳
)
trace art搞定Dex2C
art高级定制搞定VMP



---------------------------------------------
dex加壳
dex整体加固：文件加载和内存加载
函数抽取：在函数粒度完成代码的保护
VMP和dex2c：Java函数native化

so加壳
基于init、init_array以及JNI_Onload函数的加壳
基于自定义linker的加壳


---------------------------------------------
如何快速区分apk所采用的保护技术
		是否native化	函数体无效
函数抽取类壳	no		yes
vmp壳		yes		native化
dex2c壳		yes		native化



如何区分vmp和dex2c
		注册地址是否相同	函数逻辑是否相似
vmp壳		yes			yes
dex2c壳		no			no


dex整体加壳是基础防护
1、文件加载：定位解密文件是关键
2、内存加载：加载时机和内存起始地址是关键
通用方案：dex打开和优化的流程以及产出的odex、dex2oat，编译的流程和生成的oat文件等等

函数抽取是中阶防护
1、类加载和函数执行前的流程解密
2、函数执行中动态自解密
方案：关注被抽取的函数的执行流程是关键，定位被抽取的函数的恢复时机即可。


vmp和dex2c是高级防护
1、vmp 定位解释器是关键，找到映射关系便可恢复
2、dex2c 基础是编译原理，进行了等价语义转换，彻底还原难度巨大
通用解决方案：关注jni相关的api调用是关键，也是分析vmp和dex2c保护函数的逻辑的关键

